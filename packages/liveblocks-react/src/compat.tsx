/**
 * NOTE:
 * This file is AUTOGENERATED!
 *
 * Do not update it manually.
 */

import type {
  BroadcastOptions,
  History,
  Json,
  JsonObject,
  LiveList,
  LiveMap,
  LiveObject,
  Lson,
  LsonObject,
  Others,
  Room,
  User,
} from "@liveblocks/client";

import type { RoomProviderProps } from "./factory";
import { create } from "./factory";

const _hooks = create();

/**
 * Makes a Room available in the component hierarchy below.
 * When this component is unmounted, the current user leave the room.
 * That means that you can't have 2 RoomProvider with the same room id in your react tree.
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { RoomProvider } = hooks;
 */
export function RoomProvider<
  TPresence extends JsonObject,
  TStorage extends LsonObject
>(props: RoomProviderProps<TPresence, TStorage>) {
  return _hooks.RoomProvider(props);
}

/**
 * Returns a function that batches modifications made during the given function.
 * All the modifications are sent to other clients in a single message.
 * All the modifications are merged in a single history item (undo/redo).
 * All the subscribers are called only after the batch is over.
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useBatch } = hooks;
 */
export function useBatch(): (callback: () => void) => void {
  return _hooks.useBatch();
}

/**
 * Returns a callback that lets you broadcast custom events to other users in the room
 *
 * @example
 * const broadcast = useBroadcastEvent();
 *
 * broadcast({ type: "CUSTOM_EVENT", data: { x: 0, y: 0 } });
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useBroadcastEvent } = hooks;
 */
export function useBroadcastEvent(): (
  event: Json,
  options?: BroadcastOptions
) => void {
  return _hooks.useBroadcastEvent();
}

/**
 * useErrorListener is a react hook that lets you react to potential room connection errors.
 *
 * @example
 * useErrorListener(er => {
 *   console.error(er);
 * })
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useErrorListener } = hooks;
 */
export function useErrorListener(callback: (err: Error) => void): void {
  return _hooks.useErrorListener(callback);
}

/**
 * useEventListener is a react hook that lets you react to event broadcasted by other users in the room.
 *
 * @example
 * useEventListener(({ connectionId, event }) => {
 *   if (event.type === "CUSTOM_EVENT") {
 *     // Do something
 *   }
 * });
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useEventListener } = hooks;
 */
export function useEventListener(
  callback: (eventData: { connectionId: number; event: Json }) => void
): void {
  return _hooks.useEventListener(callback);
}

/**
 * Returns the room.history
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useHistory } = hooks;
 */
export function useHistory(): History {
  return _hooks.useHistory();
}

/**
 * Returns the LiveList associated with the provided key.
 * The hook triggers a re-render if the LiveList is updated, however it does not triggers a re-render if a nested CRDT is updated.
 *
 * @param key The storage key associated with the LiveList
 * @returns null while the storage is loading, otherwise, returns the LiveList associated to the storage
 *
 * @example
 * const animals = useList("animals");  // e.g. [] or ["ü¶Å", "üêç", "ü¶ç"]
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useList } = hooks;
 */
export function useList<TValue extends Lson>(
  key: string
): LiveList<TValue> | null {
  return _hooks.useList(key);
}

/**
 * Returns the LiveMap associated with the provided key. If the LiveMap does not exist, a new empty LiveMap will be created.
 * The hook triggers a re-render if the LiveMap is updated, however it does not triggers a re-render if a nested CRDT is updated.
 *
 * @param key The storage key associated with the LiveMap
 * @returns null while the storage is loading, otherwise, returns the LiveMap associated to the storage
 *
 * @example
 * const shapesById = useMap<string, Shape>("shapes");
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useMap } = hooks;
 */
export function useMap<TKey extends string, TValue extends Lson>(
  key: string
): LiveMap<TKey, TValue> | null {
  return _hooks.useMap(key);
}

/**
 * Returns the presence of the current user of the current room, and a function to update it.
 * It is different from the setState function returned by the useState hook from React.
 * You don't need to pass the full presence object to update it.
 *
 * @example
 * const [myPresence, updateMyPresence] = useMyPresence();
 * updateMyPresence({ x: 0 });
 * updateMyPresence({ y: 0 });
 *
 * // At the next render, "myPresence" will be equal to "{ x: 0, y: 0 }"
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useMyPresence } = hooks;
 */
export function useMyPresence<TPresence extends JsonObject>(): [
  TPresence,
  (overrides: Partial<TPresence>, options?: { addToHistory: boolean }) => void
] {
  return _hooks.useMyPresence() as unknown as [
    TPresence,
    (overrides: Partial<TPresence>, options?: { addToHistory: boolean }) => void
  ];
}

/**
 * Returns the LiveObject associated with the provided key.
 * The hook triggers a re-render if the LiveObject is updated, however it does not triggers a re-render if a nested CRDT is updated.
 *
 * @param key The storage key associated with the LiveObject
 * @returns null while the storage is loading, otherwise, returns the LveObject associated to the storage
 *
 * @example
 * const object = useObject("obj");
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useObject } = hooks;
 */
export function useObject<TData extends LsonObject>(
  key: string
): LiveObject<TData> | null {
  return _hooks.useObject(key);
}

/**
 * Returns an object that lets you get information about all the the users currently connected in the room.
 *
 * @example
 * const others = useOthers();
 *
 * // Example to map all cursors in jsx
 * {
 *   others.map(({ connectionId, presence }) => {
 *     if(presence == null || presence.cursor == null) {
 *       return null;
 *     }
 *     return <Cursor key={connectionId} cursor={presence.cursor} />
 *   })
 * }
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useOthers } = hooks;
 */
export function useOthers<TPresence extends JsonObject>(): Others<TPresence> {
  return _hooks.useOthers() as unknown as Others<TPresence>;
}

/**
 * Returns a function that redoes the last operation executed by the current client.
 * It does not impact operations made by other clients.
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useRedo } = hooks;
 */
export function useRedo(): () => void {
  return _hooks.useRedo();
}

/**
 * Returns the Room of the nearest RoomProvider above in the React component
 * tree.
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useRoom } = hooks;
 */
export function useRoom<
  TPresence extends JsonObject,
  TStorage extends LsonObject
>(): Room<TPresence, TStorage> {
  return _hooks.useRoom() as unknown as Room<TPresence, TStorage>;
}

/**
 * Gets the current user once it is connected to the room.
 *
 * @example
 * const user = useSelf();
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useSelf } = hooks;
 */
export function useSelf<
  TPresence extends JsonObject
>(): User<TPresence> | null {
  return _hooks.useSelf() as unknown as User<TPresence> | null;
}

export function useStorage<TStorage extends LsonObject>(): [
  root: LiveObject<TStorage> | null
] {
  return _hooks.useStorage() as unknown as [root: LiveObject<TStorage> | null];
}

/**
 * Returns a function that undoes the last operation executed by the current client.
 * It does not impact operations made by other clients.
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useUndo } = hooks;
 */
export function useUndo(): () => void {
  return _hooks.useUndo();
}

/**
 * useUpdateMyPresence is similar to useMyPresence but it only returns the function to update the current user presence.
 * If you don't use the current user presence in your component, but you need to update it (e.g. live cursor), it's better to use useUpdateMyPresence to avoid unnecessary renders.
 *
 * @example
 * const updateMyPresence = useUpdateMyPresence();
 * updateMyPresence({ x: 0 });
 * updateMyPresence({ y: 0 });
 *
 * // At the next render, the presence of the current user will be equal to "{ x: 0, y: 0 }"
 *
 * @deprecated Support for importing hooks directly from `@liveblocks/react`
 * is going to get removed in the next major release (0.18). Please use the new
 * recommended way of importing your hooks.
 *
 * Put the following contents in "./liveblocks.config.ts":
 *
 *     import { create } from "@liveblocks/react";
 *     export default create<MyPresence, MyStorage>();
 *
 * Then, import from your local module:
 *
 *     import hooks from "./liveblocks.config";
 *     const { useUpdateMyPresence } = hooks;
 */
export function useUpdateMyPresence<TPresence extends JsonObject>(): (
  overrides: Partial<TPresence>,
  options?: { addToHistory: boolean }
) => void {
  return _hooks.useUpdateMyPresence() as unknown as (
    overrides: Partial<TPresence>,
    options?: { addToHistory: boolean }
  ) => void;
}
